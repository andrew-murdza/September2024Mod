plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
}

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // official   MCVersion             Official field/method names from Mojang mapping files
    // parchment  YYYY.MM.DD-MCVersion  Open community-sourced parameter names and javadocs layered on top of official
    //
    // You must be aware of the Mojang license when using the 'official' or 'parchment' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Parchment is an unofficial project maintained by ParchmentMC, separate from MinecraftForge
    // Additional setup is needed to use their mappings: https://parchmentmc.org/docs/getting-started
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: mapping_channel, version: mapping_version

    // When true, this property will have all Eclipse/IntelliJ IDEA run configurations run the "prepareX" task for the given run configuration before launching the game.
    // In most cases, it is not necessary to enable.
    // enableEclipsePrepareRuns = true
    // enableIdeaPrepareRuns = true

    // This property allows configuring Gradle's ProcessResources task(s) to run on IDE output locations before launching the game.
    // It is REQUIRED to be set to true for this template to function.
    // See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
    copyIdeResources = true

    // When true, this property will add the folder name of all declared run configurations to generated IDE run configurations.
    // The folder name can be set on a run configuration using the "folderName" property.
    // By default, the folder name of a run configuration is the name of the Gradle project containing it.
    // generateRunFolders = true

    // This property enables access transformers for use in development.
    // They will be applied to the Minecraft artifact.
    // The access transformer file can be anywhere in the project.
    // However, it must be at "META-INF/accesstransformer.cfg" in the final mod jar to be loaded by Forge.
    // This default location is a best practice to automatically put the file in the right place in the final jar.
    // See https://docs.minecraftforge.net/en/latest/advanced/accesstransformers/ for more information.
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        // applies to all the run configs below
        configureEach {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            // example of overriding the workingDirectory set in configureEach above
            workingDirectory project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html#sub:flat_dir_resolver
     flatDir {
         dir 'libs'
     }
    maven {
        url "https://cursemaven.com"
    }
}

dependencies {
    // Specify the version of Minecraft to use.
    // Any artifact can be supplied so long as it has a "userdev" classifier artifact and is a compatible patcher artifact.
    // The "userdev" classifier will be requested and setup by ForgeGradle.
    // If the group id is "net.minecraft" and the artifact id is one of ["client", "server", "joined"],
    // then special handling is done to allow a setup of a vanilla dependency without the use of an external repository.
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"

    // Example mod dependency with JEI - using fg.deobf() ensures the dependency is remapped to your development mappings
    // The JEI API is declared for compile time use, while the full JEI artifact is used at runtime
    // compileOnly fg.deobf("mezz.jei:jei-${mc_version}-common-api:${jei_version}")
    // compileOnly fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${jei_version}")
    // runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}")

    // Example mod dependency using a mod jar from ./libs with a flat dir repository
    // This maps to ./libs/coolmod-${mc_version}-${coolmod_version}.jar
    // The group id is ignored when searching -- in this case, it is "blank"
    // implementation fg.deobf("blank:coolmod-${mc_version}:${coolmod_version}")

    // For more info:
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

    implementation fg.deobf("curse.maven:quark-243121:5594847")
    implementation fg.deobf("curse.maven:zetaforquark-968868:5597406")//NO TOML

    implementation fg.deobf("curse.maven:upgradeaquatic-326895:5615651")
    implementation fg.deobf("curse.maven:blueprint-382216:6267669")//NO TOML

    implementation fg.deobf("curse.maven:farmersdelight-398521:5051242")
    implementation fg.deobf("curse.maven:delightful-637529:5654704")
    implementation fg.deobf("curse.maven:vintagedelight-949719:5626428")
    implementation fg.deobf("curse.maven:cultural-delights-574622:6029441")
    implementation fg.deobf("curse.maven:ecologics-570463:4857272")

    implementation fg.deobf("curse.maven:hauntedharvest-541753:5212692")
    implementation fg.deobf("curse.maven:moonlightforhauntedharvest-499980:5702363")//NO TOML

    implementation fg.deobf("curse.maven:geckolib-388172:6027567")//NO TOML


//
    implementation fg.deobf("curse.maven:luminous-909107:5699118")
//
    implementation fg.deobf("curse.maven:trails-and-tales-878476:5045548")
//
    implementation fg.deobf("curse.maven:iceandfire-264231:5633453")
//
//    implementation fg.deobf("curse.maven:mokels-rpg-2-sunrise-971989:5203317")
    implementation fg.deobf("curse.maven:forestxreborn-689955:5516564")



//
    implementation fg.deobf("curse.maven:alexsmobs-426558:5698791")
    implementation fg.deobf("curse.maven:citadelforalexsmobs-331936:5633260")//NO TOML

//    implementation fg.deobf("curse.maven:forgified-fabric-api-889079:6289136")
//    implementation fg.deobf("curse.maven:sinytra-connector-890127:5605667")
//    implementation fg.deobf("curse.maven:connector-extras-913445:5490637")
//    implementation fg.deobf("curse.maven:betterend-413596:4971487")
//    implementation fg.deobf("curse.maven:bclib-495191:4971470")

    //new
    implementation fg.deobf("curse.maven:environmental-388992:6060255")
    implementation fg.deobf("curse.maven:fins-and-tails-427471:5547163")

    //Cherry Shrimp
    implementation fg.deobf("curse.maven:cherry-shrimp-1018833:5357995")

    implementation fg.deobf("curse.maven:croptopia-415438:4997459")
    implementation fg.deobf("curse.maven:epherolib-885449:4889101")//NO TOML
//

    implementation fg.deobf("curse.maven:wthit-forge-455982:5681116")//NO TOML
    implementation fg.deobf("curse.maven:badpackets-615134:4784395")//NO TOML
//

    //New
    implementation fg.deobf("curse.maven:naturalist-627986:4847009")
//    implementation fg.deobf("curse.maven:architectury-api-419699:5137938")
    implementation fg.deobf("curse.maven:architectury-api-419699:4663010")

    implementation fg.deobf("curse.maven:lets-do-wildernature-1071657:5623675")
    implementation fg.deobf("curse.maven:nether-depths-upgrade-670011:5150560")
    implementation fg.deobf("curse.maven:the-twilight-forest-227639:5468648")

    implementation fg.deobf("curse.maven:the-dawn-era-965477:5054070")
    implementation fg.deobf("curse.maven:astemirlib-933306:5066295")


    implementation fg.deobf("curse.maven:netherific-479296:4718299")
    implementation fg.deobf("curse.maven:alexs-caves-924854:5633305")

    implementation fg.deobf("curse.maven:snow-real-magic-308663:5801189")
    implementation fg.deobf("curse.maven:kiwi-303657:5603816")

    implementation fg.deobf("curse.maven:nethers-exoticism-486029:5338643")
    implementation fg.deobf("curse.maven:nethers-delight-496394:4736227")

    implementation fg.deobf("curse.maven:blue-skies-312918:5010316")
    implementation fg.deobf("curse.maven:structure-gel-api-378802:5278429")

    //For the midnight
    implementation fg.deobf("curse.maven:smartbrainlib-661293:5654964")
    implementation fg.deobf("curse.maven:lucent-493280:4951434")


    runtimeOnly fg.deobf("curse.maven:worldedit-225608:4586218")
    runtimeOnly fg.deobf("curse.maven:snow-under-trees-353942:5801187")
    runtimeOnly fg.deobf("curse.maven:notrample-914018:4764989")
    runtimeOnly fg.deobf("curse.maven:huge-structure-blocks-474114:4803547")

//    runtimeOnly fg.deobf("curse.maven:pandas-falling-trees-880630:4637709")
    runtimeOnly fg.deobf("curse.maven:cloth-config-348521:5729105")


    implementation fg.deobf("blank:bountiful_critters:1.2.2")
    implementation fg.deobf("blank:DeeperCaves:1.20.1-1.2.7")
    implementation fg.deobf("blank:midnight:1.20.1-0.6.3")


    implementation fg.deobf("curse.maven:lets-do-bloomingnature-962885:6172650")
    implementation fg.deobf("curse.maven:curios-309927:5680164")

    implementation fg.deobf("curse.maven:seafarer-forge-1098212:5880189")

//    implementation fg.deobf("curse.maven:biome-makeover-forge-567709:4815822")


    implementation fg.deobf("curse.maven:oh-the-biomes-weve-gone-1070751:6263908")
    implementation fg.deobf("curse.maven:corgilib-693313:5691268")
    implementation fg.deobf("curse.maven:terrablender-563928:5378180")
    implementation fg.deobf("curse.maven:oh-the-trees-youll-grow-962544:6026960")

    //TEST LATER
//    implementation fg.deobf("curse.maven:kitteh6660s-morecraft-59648:4855867")

    //Need compile too
//doesn't work
//    runtimeOnly fg.deobf("curse.maven:the-midnight-304881:5644116")
//    runtimeOnly fg.deobf("curse.maven:bountiful-critters-1000386:5330674")
//    runtimeOnly fg.deobf("curse.maven:deeper-caves-882911:5157225")

//    implementation fg.deobf("curse.maven:mokels-bossfight-kinora-1007397:5299291")
//    implementation fg.deobf("curse.maven:mowzies-mobs-250498:5399941")

//    implementation fg.deobf("curse.maven:lendercataclysm-551586:5474791")
//    implementation fg.deobf("curse.maven:curios-309927:5680164")
//    implementation fg.deobf("curse.maven:lionfish-api-1001614:5363774")


    //Born in Chaos: Supreme Bonescaller, Skeleton Thrasher, Bonescaller, Infernal Spirit, Barrel Zombie, Restless Spirit,
    //(Pumpkin Spirit?), Seared Spirit, Dire hound, Dire hound leader, Fallen Chaos Knight, Lifestealer, Mr. Pumpkin,
    //Sir Pumpkinhead, Senor Pumpkin, Lord Pumpkinhead,

    //Staff of Magic Arrows, Bonecaller staff, Pumpkin staff, pumpkin pistol + bullet, Death Totem (prevents death and gives power
    //in exchange for hunger, nightmare scythe, nightmare reaper axe, soul saber, dark war blade, scull breaker hammer, soulbean, dark ritual dagger, spirit divider
    //sharpened dark metal sword
    //Dark metal armor; nightmare armor (robe-like), spiny shell helmet and chestplate, lord pumpkin head's cap (casts soul-life on attackers)
    //Monster flesh

//    implementation fg.deobf("curse.maven:born-in-chaos-686437:5369688")

    //Marium's Soulslike Weaponry: Day Stalker, Night Prowler, Withered Demon, Forlorn, Soulmass, Frost Giant, Rime Spectre
    //The Decaying King, The Old Champion's Remains, The Returning Knight, The Fallen Icon, The Monarch of Chaos,
    //
//    implementation fg.deobf("curse.maven:mariums-soulslike-weaponry-632066:5662104")
//    implementation fg.deobf("curse.maven:projectile-damage-attribute-643780:4597791")
//    implementation fg.deobf("curse.maven:attributefix-280510:4911084")


//    implementation fg.deobf("curse.maven:bossominium-694188:5287096")
//    implementation fg.deobf("curse.maven:monsters-girls-secrets-of-mermaids-1068569:5566096"

//    No longer want
//    implementation fg.deobf("curse.maven:chickensshed-282684:5294511")//NO TOML
//    implementation fg.deobf("curse.maven:brighter-block-light-552271:4721366")

}

mixin {
    // MixinGradle Settings
    add sourceSets.main, "${mod_id}.mixins.refmap.json"
    config "${mod_id}.mixins.json"
}


// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

// Example for how to get properties into the manifest for reading at runtime.
tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    // This is the preferred method to reobfuscate your jar file
    finalizedBy 'reobfJar'
}

// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing:
// tasks.named('publish').configure {
//     dependsOn 'reobfJar'
// }

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
